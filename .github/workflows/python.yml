name: sl-parser
on:
  push:
    branches:
      - master
    tags:
      - "*"
  pull_request:
  workflow_dispatch:
jobs:
  test:
    name: "Run unit tests with coverage"
    runs-on: ubuntu-latest
    steps:
      - name: Setup Environment
        uses: sevenelevendevunipd/setup-python-ci@v1
        with:
          python-version: "3.10"
          poetry-version: "1.4.1"
          install-dev-deps: true
      - name: Run pytest with coverage
        run: poetry run pytest
      - name: Report coverage
        if: github.event_name == 'pull_request'
        uses: orgoro/coverage@v3
        with:
          coverageFile: coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}
  check_style:
    name: "Check coding style and formatting"
    runs-on: ubuntu-latest
    steps:
      - name: Setup Environment
        id: setup
        uses: sevenelevendevunipd/setup-python-ci@v1
        with:
          python-version: "3.10"
          poetry-version: "1.4.1"
          install-dev-deps: true
      - name: Run Black formatter
        run: poetry run black --check .
      - name: Run Ruff linter
        run: poetry run ruff check --format=github .
        if: ${{ success() || (failure() && steps.setup.conclusion == 'success') }}
  release:
    name: "Build release and push to PyPI"
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [test, check_style]
    steps:
      - name: Setup Environment
        uses: sevenelevendevunipd/setup-python-ci@v1
        with:
          python-version: "3.10"
          poetry-version: "1.4.1"
          install-dev-deps: false
      - name: Bump package version
        run: poetry version $(git describe --tags)
      - name: Publish package
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish --build

